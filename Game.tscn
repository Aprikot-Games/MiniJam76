[gd_scene load_steps=4 format=2]

[ext_resource path="res://HUD.gd" type="Script" id=1]
[ext_resource path="res://Level.tscn" type="PackedScene" id=2]

[sub_resource type="GDScript" id=1]
script/source = "extends Node2D

export (PackedScene) var Level

# Constants
enum state {START, PLAY, WIN, OVER}

# Globals
var g_state = state.START
var g_level = null
var g_level_num = 0

func change_state(new_state):
	if new_state == state.START:
		get_tree().reload_current_scene()
		g_state = new_state
	elif new_state == state.PLAY and g_state != state.PLAY:
		if g_level == null:
			set_level()
		$HUD.show_menu_UI(false)
		$HUD.show_play_UI(true)
		$HUD.set_level(g_level_num)
		g_state = new_state
	elif new_state == state.WIN and g_state == state.PLAY:
		$HUD.notify(\"Bomb found!\")
		$Timer.start()
		g_state = new_state
	elif new_state == state.OVER and g_state == state.PLAY:
		$HUD.notify(\"Game Over\")
		$Timer.start()
		g_state = new_state
	else:
		print(\"Invalid State\")
		pass

func advance_level():
	g_level_num += 1
	clear_level()
	set_level()

func _on_Timer_timeout():
	if g_state == state.OVER:
		change_state(state.START)
	elif g_state == state.WIN:
		advance_level()
		change_state(state.PLAY)
	else:
		pass

func set_level():
	g_level = Level.instance()
	g_level.connect(\"found_bomb\", self, \"_on_found_bomb\")
	add_child(g_level)

func clear_level():
	g_level.queue_free()
	g_level = null

func _process(delta):
	pass

# Called when the node enters the scene tree for the first time.
func _ready():
	pass

func _on_found_bomb():
	change_state(state.WIN)

func _on_Start_pressed():
	change_state(state.START)

func _on_Play_pressed():
	change_state(state.PLAY)

func _on_Win_pressed():
	change_state(state.WIN)

func _on_Over_pressed():
	change_state(state.OVER)
"

[node name="Game" type="Node2D"]
script = SubResource( 1 )
Level = ExtResource( 2 )

[node name="HUD" type="CanvasLayer" parent="."]
script = ExtResource( 1 )

[node name="Msg" type="Label" parent="HUD"]
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
margin_left = -80.1237
margin_top = -45.6492
margin_right = 77.8763
margin_bottom = -31.6492
__meta__ = {
"_edit_use_anchors_": false
}

[node name="MsgTimer" type="Timer" parent="HUD"]
wait_time = 2.5
one_shot = true

[node name="Level" type="Label" parent="HUD"]
margin_left = 276.812
margin_top = 3.37119
margin_right = 316.812
margin_bottom = 17.3712
__meta__ = {
"_edit_use_anchors_": false
}

[node name="DebugButtons" type="Node" parent="."]

[node name="Start" type="Button" parent="DebugButtons"]
anchor_left = 0.00625
anchor_top = 0.0277778
anchor_right = 0.00625
anchor_bottom = 0.0277778
margin_right = 55.0
margin_bottom = 20.0
text = "Start"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Play" type="Button" parent="DebugButtons"]
anchor_left = 0.00625
anchor_top = 0.0277778
anchor_right = 0.00625
anchor_bottom = 0.0277778
margin_top = 26.9237
margin_right = 55.0
margin_bottom = 46.9237
text = "Play"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Win" type="Button" parent="DebugButtons"]
anchor_left = 0.00625
anchor_top = 0.0277778
anchor_right = 0.00625
anchor_bottom = 0.0277778
margin_top = 51.6916
margin_right = 55.0
margin_bottom = 71.6916
text = "Win"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Over" type="Button" parent="DebugButtons"]
anchor_left = 0.00625
anchor_top = 0.0277778
anchor_right = 0.00625
anchor_bottom = 0.0277778
margin_left = 0.374573
margin_top = 74.8153
margin_right = 55.3746
margin_bottom = 94.8153
text = "Over"
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Timer" type="Timer" parent="."]
wait_time = 3.0
one_shot = true
[connection signal="timeout" from="HUD/MsgTimer" to="HUD" method="_on_MsgTimer_timeout"]
[connection signal="pressed" from="DebugButtons/Start" to="." method="_on_Start_pressed"]
[connection signal="pressed" from="DebugButtons/Play" to="." method="_on_Play_pressed"]
[connection signal="pressed" from="DebugButtons/Win" to="." method="_on_Win_pressed"]
[connection signal="pressed" from="DebugButtons/Over" to="." method="_on_Over_pressed"]
[connection signal="timeout" from="Timer" to="." method="_on_Timer_timeout"]
